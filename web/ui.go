// Code generated by go-bindata.
// sources:
// ui/graph.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiGraphHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x59\xdd\x6e\xdc\xc6\xf5\xbf\x0f\x90\x77\x98\x4c\xfe\xf9\x6b\x37\x16\x97\x5c\xad\x94\x1a\xd4\x92\x41\x23\x3b\xb0\x03\xcb\x0e\x2c\xa5\xa8\x2b\x0b\xce\x2c\x39\x5a\x8e\x34\x9c\x61\x66\x66\x25\xad\x2d\x01\xbd\xcc\x55\xd3\x0b\x03\x2e\x5a\xa3\x75\x51\xa4\x57\x29\x92\xa2\x45\x11\xb4\x0e\x0a\xe4\x59\x2c\xd5\x7d\x8b\x62\x66\x48\x8a\xbb\x24\x57\x4a\xcb\x1b\x72\xe6\x9c\xf9\x9d\x8f\x39\xe7\xcc\x07\x87\x6f\xdd\xb8\xb7\xb1\xfd\xe0\xe3\x9b\x20\x51\x29\x0d\xdf\x7c\x63\x98\xbf\xdf\x7c\x63\x28\xd5\x94\xe2\xf0\xcd\x37\x00\x00\xa0\x27\xf8\x11\x78\x62\xbf\xf5\x93\x22\x31\x26\xcc\x51\x3c\xf3\x41\x7f\x2d\x3b\x5e\xaf\x91\x04\x19\x27\x4a\x13\xbd\x26\x2a\xc5\x7b\x6a\x66\xe4\xa9\x16\x69\x24\x61\x8a\x1b\x24\x2d\x18\x30\x52\xac\x3a\x60\xc4\x45\x8c\x85\x13\x71\xca\x85\x0f\xde\x5e\x59\x5d\x5b\xbb\xee\x55\x34\x18\xa1\xe8\x60\x2c\xf8\x84\xc5\xed\x3c\x47\x24\x56\x89\x0f\xfa\xde\xac\xf2\x09\xb6\x46\x0d\x56\x67\xba\x73\x98\xa3\x84\x28\xdc\x66\xea\xc0\x6b\xd0\x3c\xe2\xd4\xa1\x63\xa7\xef\x55\xf5\xcf\xb8\x24\x8a\x70\xe6\x03\x81\x29\x52\xe4\x70\x06\x93\x30\xa7\xd0\xa2\x3f\xa3\x44\xae\xf2\xf5\x41\x6f\x90\x3f\xef\xfc\x20\xb7\xef\x71\x91\x3a\x11\x67\x4a\x70\x5a\x55\x27\x26\x32\xa3\x68\xea\x83\x11\xe5\xd1\x41\xa3\x8f\xde\xb9\xdc\x45\x19\x8a\x63\xc2\xc6\x3e\x78\x2f\x3b\x06\xfd\x95\x19\xda\x1e\x67\xca\x91\xe4\x31\xf6\x41\x7f\x76\x14\x25\x0c\x5f\x98\xdb\x5b\x5d\xb9\xbe\xf6\xa3\xfe\xea\xa0\xee\xfa\xb7\xd7\xd6\xd6\x16\x4f\xf1\xde\xde\x5e\x33\x03\x49\xd1\x18\xfb\x80\x71\x56\xf5\xb3\x0d\x22\xe3\x63\x20\x39\x25\x31\x78\x3b\x8a\xa2\x1a\x83\x23\x50\x4c\x26\xd2\x07\x56\xef\x5a\x28\x1f\x67\x02\x4b\x49\x38\x7b\x44\x58\x36\x51\x55\xbf\x36\xbb\x2f\x9f\xa7\x11\x57\x8a\xa7\x9a\x5a\x9d\xa9\xa1\x5b\xa4\xe4\x30\x26\x87\x35\x2b\x03\x6d\x24\x88\x28\x92\x32\x80\x82\x1f\xc1\x3c\x77\x87\xc9\x4a\x08\x14\x4e\x25\x46\x22\x4a\x86\x6e\xb2\xa2\x11\xdc\x98\x1c\xda\x3c\x7f\xcb\x71\x40\xa2\x54\x26\x7d\xd7\x8d\xf1\x21\xa6\x3c\xc3\xa2\x97\xf2\xc7\x84\x52\xd4\xe3\x62\xec\x3e\x4e\x9c\x8d\xbb\x6e\xcc\x23\xe9\xde\xc1\x48\x30\x77\x63\x6b\xcb\xdd\x52\x53\x4a\xd8\xf8\x91\xc2\xc7\xaa\x6c\x50\x22\x95\x04\x8e\x63\x91\x13\x8c\xe2\x42\x89\x14\x2b\x04\xa2\x04\x09\x89\x55\x00\x3f\xd9\xfe\xd0\xb9\x5e\x2a\xa8\x35\x18\x52\xc2\x0e\x74\xc8\x07\xd0\x58\x29\x13\x8c\x15\x04\x89\xc0\x7b\x01\x74\xa5\x42\x8a\x44\xee\x58\xa0\x2c\xe9\x45\x52\xc2\xd0\x0a\x31\xc3\x65\x24\x48\xa6\x80\x9a\x66\x38\x80\x46\x9d\x7d\x74\x88\x6c\x2f\x0c\x8b\xd9\xb0\xe1\xc2\xa4\x02\x14\x49\xb5\x89\x32\x10\x54\xe7\x43\x3f\xb0\x0f\x7d\xb0\x06\xde\x05\xef\x79\xe0\x5d\x3d\x35\xde\xf2\x1c\xc3\x0a\xf4\x2d\xb1\x95\x63\x00\x7d\x30\x28\x18\x5a\xb9\x56\xa1\x0f\x56\x56\x17\xb1\x9d\x56\xf5\x76\xdd\xf3\x67\x7f\xfb\xf7\xb3\xbf\x9e\x7f\xfe\x97\xd7\xdf\x7d\x75\xfe\xfc\xab\xb3\xe7\xdf\xd8\x9e\x4a\x1a\x4d\x58\xa4\xeb\x06\x18\x63\x75\x87\x47\x88\x6e\x93\x14\x77\x98\xec\xce\x5b\x69\x9d\xa0\x40\x00\x18\x3e\x02\x37\x90\x32\x5c\xb3\x3c\xae\x0b\xce\x9f\x7d\x79\xfe\xfc\x77\xe7\x2f\x5e\x9e\xbd\xfc\x62\x96\xa8\x4b\x05\xd2\xe3\x97\x1e\x38\xa9\x13\x83\xc4\x27\xbe\x5c\x9a\xe5\xa1\x58\x81\x29\x46\x02\x04\x40\xf5\xc6\x58\x7d\x38\xa1\xf4\x01\x46\xa2\x53\x17\xf4\xaf\xa7\x7f\x7e\xf5\xf7\x5f\x68\xb5\x37\x39\x53\x09\x78\xfd\xcf\xa7\x67\xbf\xf9\xed\xd9\xcf\x5f\xbe\x7a\xf9\xeb\xf3\xaf\x9f\x9e\xff\xe9\x0f\x67\xdf\x7e\x7b\xfe\xfc\xf3\x57\xff\xf8\xee\xec\x9b\x2f\x40\xbf\x2e\x28\x35\xe3\x72\x49\x06\xa4\xd3\x05\xd7\x40\x7f\x1d\x90\x3d\xd0\xb1\xd4\x21\xe8\x7b\x5d\xf0\xa4\xe4\x85\x1e\x04\xd7\xf2\xd6\x69\x1d\x32\x46\xd3\x02\xd0\x78\xa8\x6b\xb1\x74\x77\x81\x64\x59\x2c\x8e\xfe\x6e\x40\x49\xf8\x44\xc8\x02\xe7\x96\x6e\x14\x40\x96\x52\x40\x15\x7c\x16\xcc\xb6\x1a\xe0\x52\xc2\x26\x0a\x97\x80\x9b\xb6\x59\x40\x16\xd4\xd2\xd2\x92\x3b\xb7\x35\x6f\x37\x00\x4b\x1c\x71\x16\x97\xc0\x5b\xb6\x59\x00\x17\xd4\x02\xf8\x82\xdb\x02\x17\xed\x99\x90\xbd\x88\xb4\x04\xc9\xa4\x9e\x6b\xfa\x59\x9a\x2e\xf9\x26\x4a\x96\x1b\x68\xe9\x92\x6f\xa7\xa7\x89\x18\x2f\xf9\xda\xe7\x4d\xa4\x64\xc9\xb7\x1e\x6c\x22\x12\x0d\x6a\xfd\xd0\x44\x96\x4b\x7e\x61\xcd\x2c\xf5\xb4\x9e\x1e\xbf\xfa\xfa\xec\x97\x7f\x7c\xfd\xfb\x2f\x81\xd7\x64\x34\x91\x3f\x8e\xe3\x9f\x61\xc1\x41\x00\x3a\xbc\x0b\x82\xb0\xc9\x01\x02\xab\x89\x60\xc0\xdd\x3c\xb9\x71\x72\xeb\xe4\xf6\xc9\x96\xdb\x53\x58\xaa\x0e\xef\x2e\x14\x9f\x0f\xb3\x79\xd8\x13\x38\xa3\x28\xc2\x1d\xf7\xe1\x91\x3b\x5e\x06\xbc\x45\x96\x9e\x67\xa1\xb3\x56\xcf\xc7\x0e\xef\x29\x6e\xaa\x04\xbe\xc3\x8f\xb0\xd8\x40\x12\x77\xba\xbb\xad\x1a\x0a\x05\x42\xd0\xf7\xc0\xc9\x09\x78\xab\x34\x4d\xdb\xf5\xbe\x26\xf9\xe0\x53\xef\xff\x9e\x08\x75\xfa\xe9\x9c\xda\xdd\x96\x7a\x56\xd6\x2a\x6b\xc2\xc7\x48\xa0\x54\x76\x32\xf3\xaa\xd5\xab\x5c\x05\xf8\xbe\x8e\xb5\x7b\xa3\x7d\x1c\xa9\xba\x9e\xbd\x03\x3c\x2d\x11\x1a\xc8\x29\xca\x3a\xa5\xd4\xce\x01\x9e\xd6\xc4\xcc\x89\x3b\xc0\x53\x70\x0d\xc0\x40\x0b\xc5\x2c\xe2\x31\xfe\xe4\xfe\xed\x0d\x9e\x66\x9c\x61\xa6\x72\x49\x3b\x07\x78\xba\xdb\x20\xee\xb4\x49\x85\x7d\x4e\x58\x07\xfe\x3f\xbc\xd4\x29\x76\xa1\xee\xd4\x34\x3c\x44\x02\xe8\xe5\x0d\x04\x20\xe6\xd1\x24\xc5\xcc\x64\xeb\x4d\x8a\xf5\xe7\x07\xd3\xdb\x71\x67\x49\xd3\x1d\xbd\xef\x58\xea\xf6\x0e\x11\x9d\x54\x37\x35\x05\x86\x54\x48\x28\xbd\x3a\x2c\x02\x32\x4c\x8e\x22\x29\x5e\x80\x84\x59\x7c\x19\x0e\x66\xf1\x65\x28\xa5\x3e\x5b\x0a\xa5\x59\x75\x5d\x2a\x29\x5d\x8d\x6b\x16\xb4\x6e\xbe\x54\xb6\x6b\x53\x43\xc9\xfb\xaf\x84\xa1\xf7\x06\x0b\xdd\x82\xa9\xa3\x79\x5a\xcc\xd1\xe5\x92\xc8\xbb\xe8\x6e\x67\xd6\xa8\xae\xce\x1c\x4b\xa8\x6a\xd9\x6d\x8c\xc2\x36\x3b\x2a\x06\xac\xd7\x47\xd5\xbc\x38\x03\xe3\x14\xbb\x9e\x1d\xfd\xde\x5d\x5f\x58\x5f\xb4\x23\x22\x3e\x61\x97\x7a\xc2\x30\xb5\xb8\xe2\x38\xa5\xb7\x94\x2a\x0c\xf8\xe9\xe6\x1d\xdd\xba\x8f\x3f\x9b\xe8\x02\x37\x6f\x80\x96\x98\x70\xe3\xfa\x23\xc2\x62\x7e\xd4\xa3\x3c\x42\x3a\x1b\x7a\x99\xe0\x8a\x47\x9c\xea\x6c\x74\x5d\x9d\x8e\xf3\x1c\x7a\x60\x03\x9e\x4d\xd1\xe6\x95\x07\x2a\x9c\x7e\x46\xa1\x6f\xf2\xa9\x61\x25\x80\x29\x61\x0a\xfa\x73\x4e\x6d\x64\x44\xc7\x9a\xb1\xea\xec\x26\x36\xe3\x29\xe8\x5b\xb7\x2e\x2f\xf4\xbe\x5e\x40\x38\xc5\x3d\xca\xc7\x9d\xa6\xfa\xd8\x6d\xf4\x73\x8f\x67\x98\x75\xe0\x18\x2b\xb8\x6c\x5d\xa9\xfd\x65\x4b\x89\x76\x5a\x23\x52\xf3\x94\xf5\x24\x56\xf9\x44\xdd\xc2\x28\xc6\xa2\x03\x37\x38\x53\x98\x29\x67\x7b\x9a\x61\xb8\x0c\x20\xca\x32\x4a\xac\xfb\xdd\x7d\xc9\xd9\x7a\xb1\xb3\xb7\x1b\xfb\x76\x60\x16\x77\xd8\x84\xd2\xee\xfa\xfc\x5e\xa1\x34\x83\x51\x8e\x62\x10\x5c\x94\xc3\x7a\x21\x04\x79\xa6\xa9\x84\xc8\x9e\x3e\x1a\x4c\x24\x08\x02\xb0\xe2\x79\xad\x55\xdd\x75\x6d\x50\xc4\x48\x21\xbd\xcd\xd1\x23\x05\x96\x19\x67\x12\x6f\xe3\xe3\xf9\xf8\x29\x1e\x5b\x9e\xf4\x2e\x16\xc2\x05\x2c\x02\xcb\x0f\x78\x3c\x5d\x90\x2e\x50\x8d\x78\x3c\x75\x04\x96\x13\xaa\x60\xc3\xf2\x60\x95\xac\xce\x3d\xac\x29\x09\x97\xeb\x8a\xb7\x40\x15\xb6\x7e\x24\x39\x03\x01\xf8\x68\xeb\xde\xdd\x5e\xa6\xa7\xa8\x53\x47\x68\x31\x2c\x37\xaa\x47\x18\xc3\xe2\xd6\xf6\xe6\x1d\xed\x05\xd0\xe6\x86\x3d\x2e\x40\x87\x00\xc2\x4a\xb1\xad\x73\x51\xe8\x47\xf9\x78\x6b\xb1\x6f\x0b\x4e\x65\x52\xeb\x52\x56\xa3\xc3\x7e\x55\x87\x1d\xb2\xbb\x03\x29\x1f\x4b\xb8\xbb\x50\x1d\xfd\xe4\xea\x5c\x0b\x00\x1c\x2a\x11\x42\x70\x6d\x31\xbf\x7e\xe0\x50\xc5\xa1\x3d\x00\xd4\x04\xee\xec\xdb\x4f\xb8\xab\x53\x71\xe8\x5a\xce\xab\x60\xba\x5a\xfc\x02\x3b\xf5\x53\xb8\x24\x57\x17\x5c\x5d\x5f\xc3\x3a\x7b\x4a\x6c\xd3\x5e\x0b\x91\xba\xa4\x69\xf7\xe5\x46\x5c\x59\xd2\x65\x56\x9c\xb6\x93\xf4\x5e\x95\x8f\xf6\x41\x90\xef\xf7\x7a\x91\xc0\xe6\x9c\x9a\x97\x8e\xb6\x71\x26\x56\xb8\x42\x54\x67\x62\xd5\x26\xd3\xf9\xc8\x16\xe1\xf9\xc5\x6f\x1e\x20\xc5\x4a\x90\x68\x1e\xc1\xf6\x2e\x1c\x6c\xc2\x4f\xab\x5e\x0f\xc1\x62\xf4\xa5\x41\xc8\x47\xfb\x3b\x8d\x23\xcd\x7c\xdc\x45\x29\x86\xbb\xbb\x6d\xba\x19\x9e\x9f\xe8\xb5\x18\x36\x6c\xe5\x8b\x67\x81\xdf\x4d\xb9\xc3\x82\xe8\x53\xe3\x62\x3d\x8b\x14\xb9\xc8\x00\x68\x07\xfa\x40\x37\x4c\xbd\x91\x4a\x10\x36\x26\x7b\xd3\x0e\x1f\xed\x77\xab\x49\x50\x44\xc7\x65\x81\xd4\x20\xc5\x4e\xaf\x95\x62\xbf\x1b\x70\xe7\x17\x97\xea\x23\x7f\x48\x8e\x5f\xe4\x0b\x1c\x2a\x34\xa2\x18\xec\x09\x94\xe2\xe0\x90\x93\x38\xbf\x03\x04\x62\x42\xb1\x0c\x18\x67\xd8\x5e\xea\x05\x7d\xcf\x7b\x27\xb4\x07\x63\xe3\x4a\xab\x96\x1e\x5d\xea\x78\x85\x52\x50\x17\x6d\x05\x09\x7e\x24\x41\x84\x29\xcd\xef\x54\x83\x87\xb0\xef\x3d\x84\xf3\xb2\xcb\xfa\xd0\x20\xfc\x0a\x29\xfc\x3f\x4a\x2f\x6a\xe9\x7f\x2b\x7c\x51\xed\x68\x89\xdf\xa6\xe5\x4a\x2a\xd1\x00\x32\x07\x70\x3a\xb3\x17\xc9\x89\x43\xd7\xde\x1f\x9a\xab\xd2\xfc\x1e\xd3\xdc\xba\x92\x38\x80\xe6\xae\x3c\x26\x87\x17\x97\x8b\x86\x54\xbf\x7a\x9d\x27\x95\x17\xfe\x30\x2c\x2e\x60\x4b\x36\xbd\x13\x45\x02\x23\x23\xa1\x3c\xc6\x41\x60\x0e\xf7\x09\xa7\x31\x16\x01\xbc\x59\xde\x28\x43\xc0\x74\x20\x42\xcb\x94\xe3\x57\x2f\xf1\xb5\x88\x02\xb3\xb8\x29\x2d\x2f\x7d\x2f\xd3\x79\x14\xea\x63\xc2\xd0\x1d\x55\x3b\x25\xa6\x38\x52\x46\xbf\xe2\x18\x54\x1d\x64\x78\x78\x66\xf6\x6c\xe6\x40\x10\xc0\x3e\x0c\xd7\x52\xc2\x86\xae\xed\x5e\xcc\xbc\x02\xc3\x7e\x72\x35\xd6\x01\x0c\x07\x57\x64\x5d\x85\xe1\xca\x6a\x13\xef\xd0\xb5\xf6\x54\xbb\xb4\xff\x80\xb9\x7e\x0e\xa0\xbd\x8a\xf7\xbd\xec\x78\xbd\xf8\x07\x42\x18\x25\x0c\xaf\xc3\x10\x0c\xed\x7d\x7e\xee\x3d\x4c\x31\xb4\x6e\x29\x0f\xcd\x30\xbf\x8e\x8e\x91\xc2\xba\xed\xe8\xd3\x0a\x85\xf5\x60\xcc\xd5\xf4\x1c\xcf\xf1\xb6\x3d\xdf\x83\x21\x70\x0a\x78\x0d\x59\x9c\x9f\x5b\x00\xc3\x06\x4d\x2c\xa3\xc0\x12\xab\x76\x81\xf7\x0d\x79\xc6\x1f\xda\xfa\x99\x20\xa8\xa2\x86\x66\xf1\xf4\x17\x87\x84\x5d\x60\xab\x7f\x9b\x02\x38\xf0\xb2\xe3\xcb\xc2\xc4\x83\x61\xdf\xbb\xe2\xd4\x7b\x30\x1c\x5c\x91\x77\xcd\x83\xe1\xda\x15\x79\xfb\x9e\x51\xa2\x89\xbb\x29\x52\x66\xbc\x3e\x52\xac\xf0\xfa\x68\xa2\x94\x4e\x4e\xfb\x47\x06\x9a\x7f\x82\xb0\x90\xb1\x95\x9f\xc6\x6c\xe6\xca\xc9\x28\x25\x0a\x02\xce\x22\x4a\xa2\x03\xed\x41\x7b\xef\x03\x81\x5b\x4b\xd8\x99\x3f\x36\x17\x95\x23\xaf\xcd\x95\x2c\xce\x57\x25\x9d\x4e\xf9\x67\xae\xca\x58\xa0\x29\x2c\x82\xfb\xe2\x27\x29\x45\x99\xc4\x7e\xf1\xb1\x3e\x13\x11\xca\x14\xbe\xef\x5f\x7c\xff\x42\x2f\x96\xf6\x9d\xe4\xa5\x7e\xe0\x79\xd9\x71\x68\x22\xd1\x2e\x73\x43\x57\x25\x86\xc7\x70\x85\x3a\x4e\xf3\x2e\xdd\xd4\x9b\xca\xbc\x09\x4c\x75\x37\x7c\x6e\x21\xa1\x2a\x54\x1f\x94\x6c\x11\xac\x1e\x99\x66\xe6\xc3\x50\x4a\x1f\xd9\x05\x66\xc6\x43\xae\xf9\x8d\xfd\x9f\x00\x00\x00\xff\xff\x28\xed\x8e\x6e\xde\x1e\x00\x00")

func uiGraphHtmlBytes() ([]byte, error) {
	return bindataRead(
		_uiGraphHtml,
		"ui/graph.html",
	)
}

func uiGraphHtml() (*asset, error) {
	bytes, err := uiGraphHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/graph.html", size: 7902, mode: os.FileMode(438), modTime: time.Unix(1631515762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/graph.html": uiGraphHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"graph.html": &bintree{uiGraphHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
