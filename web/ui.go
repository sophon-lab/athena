// Code generated by go-bindata.
// sources:
// web/ui/graph.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webUiGraphHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xcd\x6e\xdb\x46\x10\xbe\x1b\xf0\x3b\x4c\xd6\x08\x22\xc3\x21\x69\xd9\x56\x6a\xc8\xa4\x0b\xc4\x4d\x91\x06\xf9\x29\x6a\x17\x68\x11\x04\xc1\x8a\x1c\x91\x6b\x2f\x77\x99\xdd\xa1\x64\xa5\xc8\xb1\xe7\x1e\xfa\x02\xe9\xa1\x40\x1f\xa2\xc8\x21\xef\x12\x20\x8f\x51\x2c\x7f\x64\xca\xfa\x69\xda\xbd\x68\xb5\x33\x3b\xf3\xcd\x37\xb3\x9a\x51\x78\xe7\x9b\x17\x67\x17\x3f\x7f\xff\x08\x32\xca\xe5\xe9\xf6\x56\xd8\x7c\x6e\x6f\x85\x96\x66\x12\x4f\xb7\xb7\x00\x00\x7c\xa3\xa7\xf0\x4b\xbd\x77\x2b\xe7\x26\x15\xca\x23\x5d\x0c\xa1\x3f\x28\xae\x4f\x96\x44\x46\xa4\x19\x39\xe1\xfe\x2a\xa9\xc4\x31\xcd\x6f\xd6\xd2\x77\xed\xc6\x1f\x91\xea\xfa\x1a\x69\x93\xa0\xf1\x62\x2d\xb5\x19\xc2\xce\xc1\xd1\x60\x70\xbc\xdf\x31\x39\xe2\xf1\x55\x6a\x74\xa9\x92\xf5\x3a\x53\x91\x50\x36\x84\xfe\xfe\x22\x9a\x0c\x6b\x94\x87\x47\x0b\xc7\x8d\x99\x69\x26\x08\x4f\x6e\xa3\x8b\xb5\xf4\x64\xea\xf5\xf7\xbb\x18\x0b\x6d\x05\x09\xad\x86\x60\x50\x72\x12\x13\xec\xc6\x2c\x94\xd7\x7a\xea\x2f\x38\x6a\x60\x1d\x1f\xfa\x87\xcd\xba\xbb\xe4\x6f\xac\x4d\xee\xc5\x5a\x91\xd1\xb2\xeb\x32\x11\xb6\x90\x7c\x36\x84\x91\xd4\xf1\xd5\xca\x58\xef\xfe\x7b\xa8\x05\x4f\x12\xa1\xd2\x21\x3c\x28\xae\xa1\x7f\xb0\x20\x1b\x6b\x45\x9e\x15\x6f\x71\x08\xfd\xc5\x5b\x52\x28\xbc\x09\xc9\x3f\x3a\x38\x1e\x7c\xd5\x3f\x3a\x5c\xa6\x70\x67\x30\x18\x6c\x4e\xd5\x78\x3c\x5e\xad\x20\x72\x9e\xe2\x10\x94\x56\x5d\x2e\xeb\x62\xa8\x78\x04\xab\xa5\x48\x60\x27\x8e\xe3\x25\x05\xcf\xf0\x44\x94\x76\x08\x47\x2b\x2b\x0c\xaf\x0b\x83\xd6\x0a\xad\x5e\x0b\x55\x94\xd4\xe5\x75\x35\x7d\x4d\xdd\x8e\x34\x91\xce\x9d\x74\xce\xc7\xbb\xed\xad\x30\x68\xdf\x8a\x7b\x40\xfd\xd3\x37\x25\x9a\x59\x18\x64\x7d\xf7\xa0\xee\x78\x1e\x64\x44\x85\x1d\x06\x41\x82\x13\x94\xba\x40\xe3\xe7\xfa\xad\x90\x92\xfb\xda\xa4\xc1\xdb\xcc\x3b\x7b\x1e\x24\x3a\xb6\xc1\x53\xe4\x46\x05\x67\xe7\xe7\xc1\x39\xcd\xa4\x50\xe9\x6b\xc2\x6b\x9a\x7f\x91\xc2\x92\x05\xcf\x6b\x3c\x21\x4f\x9a\xf7\x19\xe6\x48\x1c\xe2\x8c\x1b\x8b\x14\xb1\x1f\x2f\xbe\xf5\x8e\x59\x2b\x73\x08\x42\x29\xd4\x95\x2b\xce\x88\x55\x58\x6d\x86\x48\x0c\x32\x83\xe3\x88\x05\x96\x38\x89\x38\x48\x0d\x2f\x32\x3f\xb6\x96\x9d\xd6\x4e\xaa\xeb\x36\x36\xa2\x20\xa0\x59\x81\x11\xab\xe0\x5c\xf2\x09\xaf\x4f\x5b\x1f\x55\xb9\x94\x2a\x76\x6f\x00\x2c\x72\x13\x67\xbd\xdd\x2e\xab\x6e\x4d\xb8\x01\x77\x1f\x22\x48\x74\x5c\xe6\xa8\xc8\x4f\x91\x1e\x49\x74\xdb\x87\xb3\xef\x92\xde\x3d\x27\xf7\x5c\x7a\xee\xed\xfa\x13\x2e\xcb\x6e\xee\xdd\x0a\x82\x58\x2b\xab\x25\xfa\x52\xa7\x3d\xa7\xbd\x7b\x4b\xe3\x3a\x97\x8f\x89\x0a\x88\x40\xe1\x14\x7e\x7a\xf6\xd4\x7d\xfb\x01\xdf\x94\x68\xa9\x77\x5b\xd9\x41\xca\xb4\x75\x90\xa6\x42\x25\x7a\xea\x4b\x1d\x73\x17\x85\x5f\x18\x4d\x3a\xd6\x12\xf6\x80\x05\x01\x83\xbd\x25\x0d\x77\x71\xb5\x73\x5f\x17\xa8\x7a\x2c\x45\x62\xf7\x6b\xfb\xce\x48\xcd\xcb\xd7\x84\xf9\x1b\x19\x39\x83\x1b\xe0\xfb\x16\xa9\x01\xfd\x18\x79\x82\xa6\xc7\xce\xb4\x22\x54\xe4\x5d\xcc\x0a\x64\xf7\x81\xf1\xa2\x90\xa2\x86\x12\x5c\x5a\xad\x4e\xda\xf4\xd7\xd9\x5f\x6f\x58\x25\x3d\x55\x4a\xb9\x3b\x7f\x18\x4b\xe8\x95\xd4\x3c\x81\xe8\x26\xa5\xcb\xc9\x74\x4b\x8c\xa1\x47\x99\xb0\xbe\xab\x9f\xd2\x42\x14\xc1\xc1\xfe\xfe\x4a\xd5\x3a\x77\x35\xe1\x09\x27\x0e\x11\x54\x37\x0d\xda\x42\x2b\x8b\x17\x78\x7d\x9b\xcb\x6e\x8e\x2c\x19\x88\x80\xb1\x0d\x2a\x06\xed\x43\x9d\xcc\x36\x14\x17\xa3\x91\x4e\x66\x9e\x41\x5b\x4a\x62\xbb\xab\x4d\x75\xcb\x8b\x2d\x41\x64\xf7\x97\x61\xaf\x31\xd4\x46\xfa\xc4\x6a\x05\x11\x3c\x39\x7f\xf1\xdc\x2f\x5c\x82\x7a\xcb\x16\xd6\x84\xd5\x84\xe4\x0b\xa5\xd0\x3c\xbe\x78\xf6\xd4\x71\x00\x10\x52\xf5\xf2\x3f\xbe\xff\xf8\x3e\x24\xd3\x7c\x66\xa7\x24\x72\xf4\x2c\x1a\x81\x36\x0c\x28\x9b\x9f\x4b\x9d\xde\x1c\x40\x18\xb4\x57\x82\xd6\xcc\x3a\x56\xc7\xda\x40\x4f\x80\x50\xf3\x38\xd6\xa6\xb6\x0d\x58\xea\xf4\xbc\x49\xd5\x7a\xc5\xca\xee\x65\xd7\xee\x4b\xf1\xea\x25\x73\x38\xd9\xab\x8d\x2e\xdc\x6a\x5c\xec\x45\xc0\x5c\xf4\x0c\xf6\x36\xeb\xbb\xc5\x42\x4a\x9c\xe6\x2a\x87\x2f\x2f\xeb\x2d\x7b\xe5\x1e\x69\x18\x50\x02\x5f\x6a\xd4\x51\xb9\x8e\x3c\xa8\x5b\xc3\x3a\x91\xfd\x2f\x21\xcc\xe1\x57\x45\x64\xc9\x08\x95\x8a\xf1\xac\xb7\x10\x4d\x8e\x64\x44\xec\x08\x6c\xc2\xf8\x32\xbb\x55\xb0\x6e\xc7\x47\x12\xc1\x94\x12\x6d\x64\xf4\xd4\xd6\xe7\x2d\xd9\x95\x45\xa7\xd1\x68\x7f\x19\x4b\x9b\x19\x5a\xc3\xce\xaa\xa2\xb7\x64\x56\x18\xb9\x65\xe0\xdd\xc2\xef\x59\x23\x0c\x83\xba\x51\xb9\x4e\x1c\x34\x0d\x33\x4c\xc4\x04\x44\x12\xb1\x6a\xb4\x4a\xc4\x84\x9d\xb6\x37\x2b\x51\x2c\xb9\xb5\x11\x33\x7a\xda\x6d\x6f\x5d\xd1\x7c\x06\x64\xa7\x61\x90\x88\x49\x57\xcd\xfd\xa8\x73\x83\xbc\xf2\x30\x6f\x67\x0c\x0a\xc9\x63\xcc\xb4\x4c\xd0\x44\xec\xf3\x87\xdf\x3f\xfd\xfa\xe7\xe7\x3f\xfe\xfa\xfc\xe1\xc3\xa7\xbf\x7f\x63\xa0\x78\x8e\x11\xab\x35\x1b\x27\xdd\xc1\xcf\xf9\x69\x0d\xb7\x7d\xb9\x71\xfc\x7f\x81\x2f\x92\x17\xd6\x73\x50\xa3\x36\x22\xc5\x9a\x86\x3f\x2a\x89\xb4\x62\xf5\x40\x17\xb1\x6a\x26\x66\x50\xb5\xe6\x88\x55\x83\x4e\x0b\xde\x96\xa3\x5c\x10\x03\xad\x62\x29\xe2\xab\x88\xb5\x73\x00\x83\xa0\x0b\xa7\x43\xd8\x4d\x0c\x9d\x5d\x47\x5c\x17\x65\x3d\xd2\x45\xec\x80\x35\xdb\x06\xcb\x0e\xdf\x8f\x1f\xe0\x80\x41\x35\xd1\x44\xec\xe6\x8f\x82\xe4\x85\xc5\x61\xbb\x39\x59\x60\xa3\x6a\x02\x75\x72\xba\xed\x60\x01\x61\x25\x99\x63\xac\x0b\x7f\x01\x63\x50\xfd\x4d\xfa\x27\x00\x00\xff\xff\xf6\x0f\xf9\x6b\x3e\x0d\x00\x00")

func webUiGraphHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webUiGraphHtml,
		"web/ui/graph.html",
	)
}

func webUiGraphHtml() (*asset, error) {
	bytes, err := webUiGraphHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/ui/graph.html", size: 3390, mode: os.FileMode(438), modTime: time.Unix(1626278607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/ui/graph.html": webUiGraphHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"web": &bintree{nil, map[string]*bintree{
		"ui": &bintree{nil, map[string]*bintree{
			"graph.html": &bintree{webUiGraphHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
