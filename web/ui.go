// Code generated by go-bindata.
// sources:
// web/ui/graph.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webUiGraphHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xdd\x6e\x14\xc7\x12\xbe\xb7\xe4\x77\x28\xda\x42\xac\x05\x33\xb3\x6b\x7b\x39\xd6\x7a\x66\x8f\x04\x87\x23\x82\x20\x44\xc1\x91\x12\x61\x14\xf5\xce\xd4\xee\xb4\xdd\xdb\x3d\x74\xd7\xec\x4f\x22\x5f\xe6\x3a\x17\x79\x01\x72\x11\x29\x0f\x11\x71\xc1\xbb\x20\xf1\x18\x51\xcf\xcf\x7a\xc6\xfb\x03\xa2\x6f\x68\xa6\xaa\xab\xbe\xfa\xaa\x6a\xab\x1c\xde\xf9\xdf\xcb\xc7\xe7\x3f\x7d\xf7\x04\x52\x9a\xca\xe1\xfe\x5e\x58\xfd\xbb\xbf\x17\x5a\x5a\x4a\x1c\xee\xef\x01\x00\xf8\x46\xcf\xe1\xd7\xf2\xee\xce\x94\x9b\x89\x50\x1e\xe9\x6c\x00\xbd\x7e\xb6\x38\x5b\x13\x19\x31\x49\xc9\x09\xbb\x9b\xa4\x12\xc7\xb4\x7a\x59\x4a\xaf\xeb\x8b\x3f\x22\xd5\xf4\x35\xd2\x26\x41\xe3\xc5\x5a\x6a\x33\x80\x83\xa3\x93\x7e\xff\xb4\xdb\x30\x39\xe2\xf1\xd5\xc4\xe8\x5c\x25\xdb\x75\xe6\x22\xa1\x74\x00\xbd\x6e\x1b\x4d\x8a\x25\xca\xe3\x93\xd6\xe7\xca\xcc\x3c\x15\x84\x67\xb7\xd1\xc5\x5a\x7a\x72\xe2\xf5\xba\x4d\x8c\x99\xb6\x82\x84\x56\x03\x30\x28\x39\x89\x19\x36\x63\x16\xca\xab\x3d\xf5\x5a\x8e\x2a\x58\xa7\xc7\xfe\x71\x75\xee\xae\xf9\x1b\x6b\x33\xf5\x62\xad\xc8\x68\xd9\x74\x99\x08\x9b\x49\xbe\x1c\xc0\x48\xea\xf8\x6a\x63\xac\x77\x3f\x1f\x6a\xc6\x93\x44\xa8\xc9\x00\x1e\x66\x0b\xe8\x1d\xb5\x64\x63\xad\xc8\xb3\xe2\x17\x1c\x40\xaf\xfd\x4a\x0a\x85\x37\x21\xf9\x27\x47\xa7\xfd\xff\xf4\x4e\x8e\xd7\x29\x3c\xe8\xf7\xfb\xbb\x53\x35\x1e\x8f\x37\x2b\x88\x29\x9f\xe0\x00\x94\x56\x4d\x2e\xcb\x62\x28\x78\x04\xab\xa5\x48\xe0\x20\x8e\xe3\x35\x05\xcf\xf0\x44\xe4\x76\x00\x27\x1b\x2b\x0c\x17\x99\x41\x6b\x85\x56\x3f\x0b\x95\xe5\xd4\xe4\x75\x33\x7d\x55\xdd\x8e\x34\x91\x9e\x3a\xe9\x8a\x8f\xeb\xfd\xbd\x30\xa8\x7b\xc5\x35\x50\x6f\xf8\x36\x47\xb3\x0c\x83\xb4\x57\x7d\x41\x9e\x54\x7d\x14\x4e\x91\x38\xc4\x29\x37\x16\x29\x62\x3f\x9c\xff\xdf\x3b\x65\xb5\xec\x8e\xe7\x41\x28\x85\xba\x72\x45\x14\xb1\xc2\xa6\x4d\x11\x89\x41\x6a\x70\x1c\xb1\xc0\x12\x27\x11\x07\x13\xc3\xb3\xd4\x8f\xad\x65\x43\xf0\xbc\xfa\xb9\x8d\x8d\xc8\x08\x68\x99\x61\xc4\x08\x17\x14\x5c\xf2\x19\x2f\xbf\xd6\x3e\x8a\xb4\xe6\x2a\x76\xb5\x0a\x16\xb9\x89\xd3\xce\x61\x33\x7a\x77\x66\xdc\x80\x7b\x0f\x11\x24\x3a\xce\xa7\xa8\xc8\x9f\x20\x3d\x91\xe8\xae\x8f\x96\xdf\x24\x9d\x7b\x4e\xee\x39\x1a\xef\x1d\xfa\x33\x2e\xf3\x66\x8e\xdc\x09\x82\x58\x2b\xab\x25\xfa\x52\x4f\x3a\x4e\xfb\xf0\x96\xc6\x62\x2a\x9f\x12\x65\x10\x81\xc2\x39\xfc\xf8\xe2\xb9\xfb\xdf\xf7\xf8\x36\x47\x4b\x9d\xdb\xca\x0e\x52\xaa\xad\x83\x34\x17\x2a\xd1\x73\x5f\xea\x98\xbb\x28\xfc\xcc\x68\xd2\xb1\x96\x70\x1f\x58\x10\x30\xb8\xbf\xa6\xe1\x1e\x6e\x76\xee\xeb\x0c\x55\x87\x4d\x90\xd8\x83\xd2\xbe\x33\x52\xf2\xf2\x5f\xc2\xe9\x5b\x19\x39\x83\x3b\xe0\xfb\x16\xa9\x02\xfd\x14\x79\x82\xa6\xc3\x1e\x6b\x45\xa8\xc8\x3b\x5f\x66\xc8\x1e\x00\xe3\x59\x26\x45\x09\x25\xb8\xb4\x5a\x9d\xd5\xe9\x2f\xb3\xbf\xdd\xb0\x4a\x3a\x2a\x97\xf2\x70\x55\xc0\x6b\xe8\x95\xd4\x3c\x81\xe8\x26\xa5\xeb\xc9\x74\x47\x8c\xa1\x43\xa9\xb0\xbe\xab\x9f\xdc\x42\x14\xc1\x51\xb7\xbb\x51\xb5\xcc\x5d\x49\x78\xc2\x89\x43\x04\xc5\x4b\x83\x36\xd3\xca\xe2\x39\x2e\x6e\x73\xd9\xcc\x91\x25\x03\x11\x30\xb6\x43\xc5\xa0\x7d\xa4\x93\xe5\x8e\xe2\x62\x34\xd2\xc9\xd2\x33\x68\x73\x49\xec\x70\xb3\xa9\x66\x79\xb1\x35\x88\xec\xc1\x3a\xec\x2d\x86\xea\x48\x9f\x59\xad\x20\x82\x67\xaf\x5e\x7e\xeb\x67\x2e\x41\x9d\x75\x0b\x5b\xc2\xaa\x42\xf2\x85\x52\x68\x9e\x9e\xbf\x78\xbe\x8b\x83\x20\xf8\x12\xa6\x2a\x2d\x3d\xba\xfc\x4a\x4c\x63\x6d\xa0\x23\x40\xa8\x55\x70\x5b\xf3\x5d\xb3\x20\xf5\xe4\x55\x85\x6a\xbb\x62\x61\xf7\xb2\x69\xf7\xb5\x78\xf3\x9a\x49\x3d\xb1\xec\xcd\x4e\x17\xee\x54\x2e\xee\x47\xbb\xd5\xdc\x61\x21\x25\x43\xd7\x7d\x1b\xfc\xbc\xbe\x2c\xaf\xec\x8d\x6b\xd8\x30\xa0\x04\x86\x6c\xad\x4d\x9a\xe7\x7a\xbb\xc8\x16\x80\x9c\x3f\xe3\xfc\xed\x46\xb6\x42\x55\xe4\xc4\x92\x11\x6a\x22\xc6\xcb\x4e\x0b\xe4\x14\xc9\x88\xd8\xd1\x51\xa1\xfb\x32\xbb\x50\x18\x66\x21\xf1\x91\xc4\x6a\x90\x45\x17\xac\x77\xc1\x20\x46\x29\xab\x51\x1d\xf5\xb3\x45\x25\x2c\x66\x68\x74\xc1\x0e\x78\x37\x7e\x88\xfd\x0b\x56\x18\xa8\x39\x2e\x5c\x3b\x53\x95\xd9\xa0\xf2\xf0\x39\x20\x81\xe3\xe1\x6c\x4b\x59\x6d\xe1\x71\x53\x07\x58\x32\x1b\x8c\xdc\x32\x70\xdd\xca\x5a\x25\x0c\x83\x72\x6a\xb9\x7d\x34\xa8\xa6\x67\x98\x88\x19\x88\x24\x62\xc5\x3e\x94\x88\x19\x1b\xd6\x2f\x0b\x51\x2c\xb9\xb5\x11\x33\x7a\xde\x9c\x75\x4d\xd1\x6a\x71\x63\xc3\x30\x48\xc4\xac\xa9\xe6\x7e\xe1\xb9\x41\x5e\x78\x58\xcd\x36\x06\x99\xe4\x31\xa6\x5a\xba\x4c\xb0\x4f\xef\xff\xf8\xf8\xdb\x5f\x9f\xfe\xfc\xfb\xd3\xfb\xf7\x1f\xff\xf9\x9d\x81\xe2\x53\x8c\x58\xa9\x59\x39\x69\x6e\x6b\xce\x4f\x6d\xb8\x1e\xd2\x95\xe3\xaf\x05\xde\x26\x2f\x2c\x97\x97\x4a\x6d\x44\x8a\x55\xd3\x7f\x94\x13\x69\xc5\xca\x2d\x2c\x62\xc5\x22\xcb\xa0\x98\xd3\x11\x2b\xb6\x93\x1a\xbc\xcd\x47\x53\x41\x0c\xb4\x8a\xa5\x88\xaf\x22\x56\x2f\x05\x0c\x82\x26\x9c\x06\x61\x37\x31\x34\x6e\x0d\x71\xab\x7c\xd9\x11\x6b\x15\x6b\x5d\xab\x0c\x8a\xf5\x26\x62\x37\xdb\xbd\xe4\x99\xc5\x41\x7d\x39\x6b\xb1\x41\x45\x15\x7c\x78\xf7\xe1\x5d\x9b\x81\x0f\xef\x5c\xd7\xae\x7f\xaf\x1e\x0d\x49\x4c\xd1\xb3\x68\x04\xda\x30\xa0\x74\x87\xa6\xfb\x61\xd9\xa2\x52\x74\x44\xfb\xb3\xd3\x2c\x11\x35\x41\xba\xb1\x55\x56\x50\x73\x80\xb5\x68\x2c\x24\x2b\x22\xcb\xf6\x6c\x11\x19\x14\x7f\x80\xfd\x1b\x00\x00\xff\xff\xac\xe7\x56\x08\x98\x0d\x00\x00")

func webUiGraphHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webUiGraphHtml,
		"web/ui/graph.html",
	)
}

func webUiGraphHtml() (*asset, error) {
	bytes, err := webUiGraphHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/ui/graph.html", size: 3480, mode: os.FileMode(438), modTime: time.Unix(1626191772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/ui/graph.html": webUiGraphHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"web": &bintree{nil, map[string]*bintree{
		"ui": &bintree{nil, map[string]*bintree{
			"graph.html": &bintree{webUiGraphHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
